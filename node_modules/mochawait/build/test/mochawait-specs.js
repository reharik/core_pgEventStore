/* global describe:true, before:true, beforeEach:true, afterEach:true, it:true, after:true */
'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

require('../index');

require('should');

require('source-map-support').install();

function sleep(ms) {
  var start, p;
  return _regeneratorRuntime.async(function sleep$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        start = Date.now();
        p = new _Promise(function (resolve) {
          setTimeout(function () {
            var end = Date.now();
            if (end - start < ms) {
              setTimeout(function () {
                resolve();
              }, end - start);
            } else {
              resolve();
            }
          }, ms);
        });
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(p);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function slowDouble(x) {
  return _regeneratorRuntime.async(function slowDouble$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sleep(10));

      case 2:
        return context$1$0.abrupt('return', x * 2);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function slowConcat(str, extra) {
  return _regeneratorRuntime.async(function slowConcat$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sleep(20));

      case 2:
        return context$1$0.abrupt('return', str + extra);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

describe('mochawait tests', function () {
  var _this = this;

  var myInt = 2,
      myStr = '',
      testsRun = 0;

  before(function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();

          myStr.should.equal('');
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(slowConcat(myStr, 'foo'));

        case 4:
          myStr = context$2$0.sent;

          (Date.now() - start).should.be.above(19);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  beforeEach(function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(slowDouble(myInt));

        case 3:
          myInt = context$2$0.sent;

          (Date.now() - start).should.be.above(9);

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  after(function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(slowDouble(myInt));

        case 3:
          myInt = context$2$0.sent;

          (Date.now() - start).should.be.above(9);
          myInt.should.equal(32);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  afterEach(function callee$1$0() {
    var start, i;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          i = 0;

        case 2:
          if (!(i < 5)) {
            context$2$0.next = 8;
            break;
          }

          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(sleep(10));

        case 5:
          i++;
          context$2$0.next = 2;
          break;

        case 8:
          if (testsRun === 1) {
            myStr.should.equal('foobar');
          } else {
            myStr.should.equal('foobarbaz');
          }
          (Date.now() - start).should.be.above(49);

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should work like mocha', function callee$1$0() {
    var start, then;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          myStr.should.equal('foo');
          myInt.should.equal(4);
          start = Date.now();
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(slowDouble(myInt));

        case 5:
          myInt = context$2$0.sent;
          then = Date.now();

          (then - start).should.be.above(9);
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(slowConcat(myStr, 'bar'));

        case 10:
          myStr = context$2$0.sent;

          (Date.now() - start).should.be.above(19);
          testsRun++;

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should work like mocha some more', function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          myStr.should.equal('foobar');
          myInt.should.equal(16);
          start = Date.now();
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(slowConcat(myStr, 'baz'));

        case 5:
          myStr = context$2$0.sent;

          (Date.now() - start).should.be.above(19);
          testsRun++;

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbW9jaGF3YWl0LXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7UUFHTyxVQUFVOztRQUNWLFFBQVE7O0FBSGYsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBS3hDLFNBQWUsS0FBSyxDQUFFLEVBQUU7TUFDbEIsS0FBSyxFQUNMLENBQUM7Ozs7QUFERCxhQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNsQixTQUFDLEdBQUcsYUFBWSxVQUFDLE9BQU8sRUFBSztBQUMvQixvQkFBVSxDQUFDLFlBQVk7QUFDckIsZ0JBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNyQixnQkFBSSxBQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUksRUFBRSxFQUFFO0FBQ3RCLHdCQUFVLENBQUMsWUFBWTtBQUNyQix1QkFBTyxFQUFFLENBQUM7ZUFDWCxFQUFFLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQzthQUNqQixNQUFNO0FBQ0wscUJBQU8sRUFBRSxDQUFDO2FBQ1g7V0FDRixFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ1IsQ0FBQzs7eUNBQ0ksQ0FBQzs7Ozs7OztDQUNSOztBQUVELFNBQWUsVUFBVSxDQUFFLENBQUM7Ozs7O3lDQUNwQixLQUFLLENBQUMsRUFBRSxDQUFDOzs7NENBQ1IsQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7Q0FDYjs7QUFFRCxTQUFlLFVBQVUsQ0FBRSxHQUFHLEVBQUUsS0FBSzs7Ozs7eUNBQzdCLEtBQUssQ0FBQyxFQUFFLENBQUM7Ozs0Q0FDUixHQUFHLEdBQUcsS0FBSzs7Ozs7OztDQUNuQjs7QUFFRCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsWUFBWTs7O0FBQ3RDLE1BQUksS0FBSyxHQUFHLENBQUM7TUFDVCxLQUFLLEdBQUcsRUFBRTtNQUNWLFFBQVEsR0FBRyxDQUFDLENBQUM7O0FBRWpCLFFBQU0sQ0FBQztRQUNELEtBQUs7Ozs7QUFBTCxlQUFL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LENBQUMsQ0FBQztBQUM3QixlQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuQixlQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTs7MkNBQ1IsVUFBVSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7OztBQUF0QyxlQUFLOztBQUNMLFdBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQSxDQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLGtCQUFRLEVBQUUsQ0FBQzs7Ozs7OztHQUNaLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L21vY2hhd2FpdC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBkZXNjcmliZTp0cnVlLCBiZWZvcmU6dHJ1ZSwgYmVmb3JlRWFjaDp0cnVlLCBhZnRlckVhY2g6dHJ1ZSwgaXQ6dHJ1ZSwgYWZ0ZXI6dHJ1ZSAqL1xucmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xuXG5pbXBvcnQgJy4uL2luZGV4JztcbmltcG9ydCAnc2hvdWxkJztcblxuYXN5bmMgZnVuY3Rpb24gc2xlZXAgKG1zKSB7XG4gIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gIHZhciBwID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBlbmQgPSBEYXRlLm5vdygpO1xuICAgICAgaWYgKChlbmQgLSBzdGFydCkgPCBtcykge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sIGVuZCAtIHN0YXJ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9LCBtcyk7XG4gIH0pO1xuICBhd2FpdCBwO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzbG93RG91YmxlICh4KSB7XG4gIGF3YWl0IHNsZWVwKDEwKTtcbiAgcmV0dXJuIHggKiAyO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzbG93Q29uY2F0IChzdHIsIGV4dHJhKSB7XG4gIGF3YWl0IHNsZWVwKDIwKTtcbiAgcmV0dXJuIHN0ciArIGV4dHJhO1xufVxuXG5kZXNjcmliZSgnbW9jaGF3YWl0IHRlc3RzJywgZnVuY3Rpb24gKCkge1xuICBsZXQgbXlJbnQgPSAyXG4gICAgLCBteVN0ciA9ICcnXG4gICAgLCB0ZXN0c1J1biA9IDA7XG5cbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIG15U3RyLnNob3VsZC5lcXVhbCgnJyk7XG4gICAgbXlTdHIgPSBhd2FpdCBzbG93Q29uY2F0KG15U3RyLCAnZm9vJyk7XG4gICAgKERhdGUubm93KCkgLSBzdGFydCkuc2hvdWxkLmJlLmFib3ZlKDE5KTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICBteUludCA9IGF3YWl0IHNsb3dEb3VibGUobXlJbnQpO1xuICAgIChEYXRlLm5vdygpIC0gc3RhcnQpLnNob3VsZC5iZS5hYm92ZSg5KTtcbiAgfSk7XG5cbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgbXlJbnQgPSBhd2FpdCBzbG93RG91YmxlKG15SW50KTtcbiAgICAoRGF0ZS5ub3coKSAtIHN0YXJ0KS5zaG91bGQuYmUuYWJvdmUoOSk7XG4gICAgbXlJbnQuc2hvdWxkLmVxdWFsKDMyKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICBhd2FpdCBzbGVlcCgxMCk7XG4gICAgfVxuICAgIGlmICh0ZXN0c1J1biA9PT0gMSkge1xuICAgICAgbXlTdHIuc2hvdWxkLmVxdWFsKCdmb29iYXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbXlTdHIuc2hvdWxkLmVxdWFsKCdmb29iYXJiYXonKTtcbiAgICB9XG4gICAgKERhdGUubm93KCkgLSBzdGFydCkuc2hvdWxkLmJlLmFib3ZlKDQ5KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB3b3JrIGxpa2UgbW9jaGEnLCBhc3luYyAoKSA9PiB7XG4gICAgbXlTdHIuc2hvdWxkLmVxdWFsKCdmb28nKTtcbiAgICBteUludC5zaG91bGQuZXF1YWwoNCk7XG4gICAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICBteUludCA9IGF3YWl0IHNsb3dEb3VibGUobXlJbnQpO1xuICAgIGxldCB0aGVuID0gRGF0ZS5ub3coKTtcbiAgICAodGhlbiAtIHN0YXJ0KS5zaG91bGQuYmUuYWJvdmUoOSk7XG4gICAgbXlTdHIgPSBhd2FpdCBzbG93Q29uY2F0KG15U3RyLCAnYmFyJyk7XG4gICAgKERhdGUubm93KCkgLSBzdGFydCkuc2hvdWxkLmJlLmFib3ZlKDE5KTtcbiAgICB0ZXN0c1J1bisrO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHdvcmsgbGlrZSBtb2NoYSBzb21lIG1vcmUnLCBhc3luYyAoKSA9PiB7XG4gICAgbXlTdHIuc2hvdWxkLmVxdWFsKCdmb29iYXInKTtcbiAgICBteUludC5zaG91bGQuZXF1YWwoMTYpO1xuICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgbXlTdHIgPSBhd2FpdCBzbG93Q29uY2F0KG15U3RyLCAnYmF6Jyk7XG4gICAgKERhdGUubm93KCkgLSBzdGFydCkuc2hvdWxkLmJlLmFib3ZlKDE5KTtcbiAgICB0ZXN0c1J1bisrO1xuICB9KTtcbn0pO1xuIl19