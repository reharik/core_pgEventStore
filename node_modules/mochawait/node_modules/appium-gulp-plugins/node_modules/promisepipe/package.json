{
  "name": "promisepipe",
  "version": "1.0.1",
  "description": "Pipe node.js streams safely with Promises",
  "main": "index.js",
  "scripts": {
    "test": "mocha test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/epeli/node-promisepipe.git"
  },
  "keywords": [
    "promise",
    "q",
    "stream"
  ],
  "author": {
    "name": "Esa-Matti Suuronen"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/epeli/node-promisepipe/issues"
  },
  "dependencies": {
    "q": "~0.9.7"
  },
  "devDependencies": {
    "mocha": "~1.13.0"
  },
  "readme": "# promisePipe\n\nSafely pipe node.js streams while capturing all errors to a single promise.\n\n\n## API\n\n```\npromisePipe(<readable stream>, [transform streams...], <writeable stream>)\n```\n\nIt returns a promise. On success the resolved value will be an array of the\nstreams passed in. When rejected an error object is created with following\nkeys:\n\n  - `source`: The stream that caused the error\n  - `originalError`: Original error from the stream\n  - `message`: The error message from original error\n\n## Example\n\n```javascript\n\nvar promisePipe = require(\"promisepipe\");\n\npromisePipe(\n    fs.createReadStream(INPUT_FILE),\n    new UpcaseTransform(),\n    fs.createReadStream(OUTPUT_FILE),\n).then(function(streams){\n    console.log(\"Yay, all streams are now closed/ended/finished!\");\n}, function(err) {\n    console.log(\"This stream failed:\", err.source);\n    console.log(\"Original error was:\", err.originalError);\n});\n\n```\n\n## Install\n\n    npm instal promisepipe\n\n## Why?\n\nStream piping in node.js is cool, but error handling is not because streams\ndo not bubble to the target streams.\n\nFor example if the previous example is written like this:\n\n```javascript\nfs.createReadStream(INPUT_FILE)\n.pipe(new UpcaseTransform())\n.pipe(fs.createReadStream(OUTPUT_FILE))\n```\n\nIt might crash your program at any time. You must handle the errors\nfrom each stream manually like this:\n\n```javascript\nfs.createReadStream(INPUT_FILE).on(\"error\", function(err) {\n    // handle the error\n}).pipe(new UpcaseTransform()).on(\"error\", function(err) {\n    // handle the error\n}).pipe(fs.createReadStream(OUTPUT_FILE)).on(\"error\", function(err) {\n    // handle the error\n})\n```\n\nWhich is imo repeative and cumbersome (at least when you want to use promises).\n\n",
  "readmeFilename": "README.md",
  "_id": "promisepipe@1.0.1",
  "dist": {
    "shasum": "7c5ccaecb399d9e3be8553fb91251c0a24e65921",
    "tarball": "http://registry.npmjs.org/promisepipe/-/promisepipe-1.0.1.tgz"
  },
  "_from": "promisepipe@>=1.0.1 <2.0.0",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "epeli",
    "email": "esa-matti@suuronen.org"
  },
  "maintainers": [
    {
      "name": "epeli",
      "email": "esa-matti@suuronen.org"
    }
  ],
  "directories": {},
  "_shasum": "7c5ccaecb399d9e3be8553fb91251c0a24e65921",
  "_resolved": "http://registry.npmjs.org/promisepipe/-/promisepipe-1.0.1.tgz",
  "homepage": "https://github.com/epeli/node-promisepipe#readme"
}
