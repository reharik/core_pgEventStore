'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _libUtils = require('../../lib/utils');

var _libUtils2 = _interopRequireDefault(_libUtils);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

require('mochawait');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

require('source-map-support').install();

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('ios tools', function () {
  before(function callee$1$0() {
    var _exec, _spawn;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _exec = _libUtils2['default'].exec;
          _spawn = _libUtils2['default'].spawn;

          _sinon2['default'].stub(_libUtils2['default'], 'exec', function () {
            return _exec('echo bob');
          });
          _sinon2['default'].stub(_libUtils2['default'], 'spawn', function () {
            return _spawn('echo', ['1']);
          });

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('spawn as user', function callee$1$0() {
    var proc;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.spawnAsUser('bob', 'ls', ['-l']));

        case 2:
          proc = context$2$0.sent;

          proc.kill();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('spawn as current user', function callee$1$0() {
    var proc;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.spawnAsUser('ls', ['-l']));

        case 2:
          proc = context$2$0.sent;

          proc.kill();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('set simulator scale', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.setIosSimulatorScale());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('set configure xCode', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.configureXcode('6.1.1'));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('reset simulators', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.resetSims());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('kill all', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.killAll());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_.iosTools.killAll('ls'));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_.iosTools.killAll(['ls', 'echo']));

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _libUtils2['default'].exec.restore();
          _libUtils2['default'].spawn.restore();

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3BlY3MvaW9zLXRvb2wtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0JBRXlCLE9BQU87O3dCQUNkLGlCQUFpQjs7OztvQkFDbEIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7UUFDdEMsV0FBVzs7cUJBQ0EsT0FBTzs7OztBQVB6QixPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFTeEMsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsV0FBVyxFQUFFLFlBQU07QUFDMUIsUUFBTSxDQUFDO1FBQ0QsS0FBSyxFQUNMLE1BQU07Ozs7O0FBRE4sZUFBSyxHQUFHLHNCQUFNLElBQUk7QUFDbEIsZ0JBQU0sR0FBRyxzQkFBTSxLQUFLOztBQUV4Qiw2QkFBTSxJQUFJLHdCQUFRLE1BQU0sRUFBRSxZQUFZO0FBQ3BDLG1CQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztXQUMxQixDQUFDLENBQUM7QUFDSCw2QkFBTSxJQUFJLHdCQUFRLE9BQU8sRUFBRSxZQUFZO0FBQ3JDLG1CQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQzlCLENBQUMsQ0FBQzs7Ozs7OztHQUNKLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsZUFBZSxFQUFDO1FBQ2IsSUFBSTs7Ozs7MkNBQVMsRUF4QlosUUFBUSxDQXdCYSxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7QUFBdEQsY0FBSTs7QUFDUixjQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Ozs7Ozs7R0FDYixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHVCQUF1QixFQUFDO1FBQ3JCLElBQUk7Ozs7OzJDQUFTLEVBN0JaLFFBQVEsQ0E2QmEsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7QUFBL0MsY0FBSTs7QUFDUixjQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Ozs7Ozs7R0FDYixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHFCQUFxQixFQUFDOzs7OzsyQ0FDakIsRUFsQ0QsUUFBUSxDQWtDRSxvQkFBb0IsRUFBRTs7Ozs7OztHQUN0QyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHFCQUFxQixFQUFDOzs7OzsyQ0FDakIsRUF0Q0QsUUFBUSxDQXNDRSxjQUFjLENBQUMsT0FBTyxDQUFDOzs7Ozs7O0dBQ3ZDLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsa0JBQWtCLEVBQUM7Ozs7OzJDQUNkLEVBMUNELFFBQVEsQ0EwQ0UsU0FBUyxFQUFFOzs7Ozs7O0dBQzNCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsVUFBVSxFQUFDOzs7OzsyQ0FDTixFQTlDRCxRQUFRLENBOENFLE9BQU8sRUFBRTs7OzsyQ0FDbEIsRUEvQ0QsUUFBUSxDQStDRSxPQUFPLENBQUMsSUFBSSxDQUFDOzs7OzJDQUN0QixFQWhERCxRQUFRLENBZ0RFLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQzs7Ozs7OztHQUN2QyxDQUFDLENBQUM7O0FBRUgsT0FBSyxDQUFDOzs7O0FBQ0osZ0NBQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3JCLGdDQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7Ozs7OztHQUN0QixDQUFDLENBQUM7Q0FFTCxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9zcGVjcy9pb3MtdG9vbC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcblxuaW1wb3J0IHsgaW9zVG9vbHMgfSBmcm9tICcuLi8uLic7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vLi4vbGliL3V0aWxzJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0ICdtb2NoYXdhaXQnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ2lvcyB0b29scycsICgpID0+IHtcbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBsZXQgX2V4ZWMgPSB1dGlscy5leGVjO1xuICAgIGxldCBfc3Bhd24gPSB1dGlscy5zcGF3bjtcblxuICAgIHNpbm9uLnN0dWIodXRpbHMsIFwiZXhlY1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2V4ZWMoJ2VjaG8gYm9iJyk7XG4gICAgfSk7XG4gICAgc2lub24uc3R1Yih1dGlscywgXCJzcGF3blwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3NwYXduKCdlY2hvJywgWycxJ10pO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc3Bhd24gYXMgdXNlcicsYXN5bmMgKCkgPT4ge1xuICAgIGxldCBwcm9jID0gYXdhaXQgaW9zVG9vbHMuc3Bhd25Bc1VzZXIoJ2JvYicsICdscycsIFsnLWwnXSk7XG4gICAgcHJvYy5raWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdzcGF3biBhcyBjdXJyZW50IHVzZXInLGFzeW5jICgpID0+IHtcbiAgICBsZXQgcHJvYyA9IGF3YWl0IGlvc1Rvb2xzLnNwYXduQXNVc2VyKCdscycsIFsnLWwnXSk7XG4gICAgcHJvYy5raWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdzZXQgc2ltdWxhdG9yIHNjYWxlJyxhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgaW9zVG9vbHMuc2V0SW9zU2ltdWxhdG9yU2NhbGUoKTtcbiAgfSk7XG5cbiAgaXQoJ3NldCBjb25maWd1cmUgeENvZGUnLGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBpb3NUb29scy5jb25maWd1cmVYY29kZSgnNi4xLjEnKTtcbiAgfSk7XG5cbiAgaXQoJ3Jlc2V0IHNpbXVsYXRvcnMnLGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBpb3NUb29scy5yZXNldFNpbXMoKTtcbiAgfSk7XG5cbiAgaXQoJ2tpbGwgYWxsJyxhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgaW9zVG9vbHMua2lsbEFsbCgpO1xuICAgIGF3YWl0IGlvc1Rvb2xzLmtpbGxBbGwoJ2xzJyk7XG4gICAgYXdhaXQgaW9zVG9vbHMua2lsbEFsbChbJ2xzJywgJ2VjaG8nXSk7XG4gIH0pO1xuXG4gIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICB1dGlscy5leGVjLnJlc3RvcmUoKTtcbiAgICB1dGlscy5zcGF3bi5yZXN0b3JlKCk7XG4gICB9KTtcblxufSk7XG5cbiJdfQ==